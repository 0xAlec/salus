require_relative '../../../spec_helper.rb'

describe Salus::Scanners::ReportNodeModules do
  let(:blank_config) { {} }
  let(:report) { Salus::Report.new }
  let(:scan_report) { json_report['scans']['ReportNodeModules'] }

  describe '#run' do
    context 'no relevant node package files present' do
      it 'should throw an error since there is nothing to parse' do
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: Salus::Repo.new('spec/fixtures/blank_repository'),
          report: report,
          config: blank_config
        )
        expect { scanner.run }.to raise_error(
          Salus::Scanners::Base::InvalidScannerInvocationError,
          'Cannot report on Node modules without package.json, '\
            'package-lock.json or yarn.lock files.'
        )
      end
    end

    context 'package.json present only' do
      it 'should report on all the dependencies in the package.json file' do
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: Salus::Repo.new('spec/fixtures/report_node_modules/package_json_only'),
          report: report,
          config: blank_config
        )
        scanner.run
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package.json', 'type' => 'node_version', 'version' => '>= 6.9'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package.json', 'type' => 'npm_version', 'version' => '>= 4.0.0'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package.json',
          'type' => 'node_module',
          'name' => 'control-system',
          'version' => '1.2.3',
          'source' => 'https://npm.hq.nerv.net'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package.json',
          'type' => 'node_module',
          'name' => 'prediction',
          'version' => '0.0.1',
          'source' => 'https://npm.magi.nerv.net'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package.json',
          'type' => 'node_module',
          'name' => 'classnames',
          'version' => '^2.2.5',
          'source' => '<package manager default>'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package.json',
          'type' => 'node_module',
          'name' => 'mobx',
          'version' => '^3.2.1',
          'source' => '<package manager default>'
        )
      end
    end

    context 'package.json and package-lock.json present' do
      it 'should report on all the dependencies in the package-lock.json and package.json file' do
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: Salus::Repo.new('spec/fixtures/report_node_modules/package_lock_json'),
          report: report,
          config: blank_config
        )
        scanner.run
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package-lock.json',
          'type' => 'package_lock_version',
          'version' => '1'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package-lock.json',
          'type' => 'node_module',
          'name' => '@nerv-hq/control-system',
          'version' => '1.2.3',
          'source' => 'https://npm.hq.nerv.net/control-system/v1.2.3/'\
            'tarball#sha1-ux/eKKZxz2ojD4icjhvReee++74='
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package-lock.json',
          'type' => 'node_module',
          'name' => '@magi-core/prediction',
          'version' => '0.0.1',
          'source' => 'https://npm.magi.nerv.net/prediction/v0.0.1/'\
            'tarball#sha1-ux/EyKzTRzvejDFis90vRLj8++74='
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package-lock.json',
          'type' => 'node_module',
          'name' => 'classnames',
          'version' => '2.2.5',
          'source' => 'https://registry.npmjs.org/classnames/-/classnames-2.2.5.tgz'\
            '#sha1-+zgB1FNGdknvNgPH1hoCvRKb3m0='
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'package-lock.json',
          'type' => 'node_module',
          'name' => 'mobx',
          'version' => '3.2.1',
          'source' => 'https://registry.npmjs.org/mobx/-/mobx-3.2.1.tgz'\
            '#sha1-aureASDMP3i6pXGVAxYwoK6PE88='
        )
      end
    end

    context 'package.json and yarn.lock present' do
      it 'should report on all the dependencies in the yarn.lock and package.json file' do
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: Salus::Repo.new('spec/fixtures/report_node_modules/yarn_lock'),
          report: report,
          config: blank_config
        )
        scanner.run
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'yarn.lock',
          'type' => 'node_module',
          'name' => '@nerv-hq/control-system',
          'version' => '1.2.3',
          'source' => 'https://npm.hq.nerv.net/control-system/v1.2.3/'\
            'tarball#fb3801d453467639ef560fc7a61a02bd129bde6d'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'yarn.lock',
          'type' => 'node_module',
          'name' => '@magi-core/prediction',
          'version' => '0.0.1',
          'source' => 'https://npm.magi.nerv.net/prediction/v0.0.1/'\
            'tarball#fb3801d453467639ef5602c7a51a02fd129bbbbd'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'yarn.lock',
          'type' => 'node_module',
          'name' => 'classnames',
          'version' => '2.2.5',
          'source' => 'https://registry.yarnpkg.com/classnames/-/classnames-2.2.5.tgz'\
            '#fb3801d453467649ef3603c7d61a02bd129bde6d'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'yarn.lock',
          'type' => 'node_module',
          'name' => 'mobx',
          'version' => '3.2.1',
          'source' => 'https://registry.yarnpkg.com/mobx/-/mobx-3.2.1.tgz'\
            '#6aeade0120cc3f78baa57195031630a0ae8f13cf'
        )
        expect(scan_report['info']['dependency']).to include(
          'dependency_file' => 'yarn.lock',
          'type' => 'node_module',
          'name' => 'eslint-plugin-internal',
          'version' => '0.0.0',
          'source' => 'file:./lib/lint-rules'
        )
      end
    end
  end

  describe '#should_run?' do
    context 'no relevant node dependency files present' do
      it 'should return false' do
        repo = Salus::Repo.new('spec/fixtures/blank_repository')
        expect(repo.package_json_present?).to eq(false)
        expect(repo.package_lock_json_present?).to eq(false)
        expect(repo.yarn_lock_present?).to eq(false)
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: repo,
          report: report,
          config: blank_config
        )
        expect(scanner.should_run?).to eq(false)
      end
    end

    context 'package.json is present' do
      it 'should return true' do
        repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_json_only')
        expect(repo.package_json_present?).to eq(true)
        expect(repo.package_lock_json_present?).to eq(false)
        expect(repo.yarn_lock_present?).to eq(false)
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: repo,
          report: report,
          config: blank_config
        )
        expect(scanner.should_run?).to eq(true)
      end
    end

    context 'package.json and package-lock.json are present' do
      it 'should return true' do
        repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_lock_json')
        expect(repo.package_json_present?).to eq(true)
        expect(repo.package_lock_json_present?).to eq(true)
        expect(repo.yarn_lock_present?).to eq(false)
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: repo,
          report: report,
          config: blank_config
        )
        expect(scanner.should_run?).to eq(true)
      end
    end

    context 'package.json and yarn.lock are present' do
      it 'should return true' do
        repo = Salus::Repo.new('spec/fixtures/report_node_modules/yarn_lock')
        expect(repo.package_json_present?).to eq(true)
        expect(repo.package_lock_json_present?).to eq(false)
        expect(repo.yarn_lock_present?).to eq(true)
        scanner = Salus::Scanners::ReportNodeModules.new(
          repository: repo,
          report: report,
          config: blank_config
        )
        expect(scanner.should_run?).to eq(true)
      end
    end
  end
end
