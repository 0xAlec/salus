require_relative '../../spec_helper'
require 'json'

describe Cyclonedx::ReportNodeModules do
  describe "#run" do
    it 'should report all the deps in the package.json if both\
        package-lock.json and yarn.lock files do not exist' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_json_only')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
            "type": "library",
            "name": "@nerv-hq/control-system",
            "version": "1.2.3",
            "purl": "pkg:npm/%40nerv-hq/control-system",
          },
          {
            "type": "library",
            "name": "@magi-core/prediction",
            "version": "0.0.1",
            "purl": "pkg:npm/%40magi-core/prediction",
          },
          {
            "type": "library",
            "name": "classnames",
            "version": "^2.2.5",
            "purl": "pkg:npm/classnames",
          },
          {
            "type": "library",
            "name": "mobx",
            "version": "^3.2.1",
            "purl": "pkg:npm/mobx",
          }
        ]
      )
    end

    it 'should report all the deps in the package-lock.json if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/package_lock_json')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
            "type": "library",
            "name": "@nerv-hq/control-system",
            "version": "1.2.3",
            "purl": "pkg:npm/%40nerv-hq/control-system@1.2.3",
          },
          {
            "type": "library",
            "name": "@magi-core/prediction",
            "version": "0.0.1",
            "purl": "pkg:npm/%40magi-core/prediction@0.0.1",
          },
          {
            "type": "library",
            "name": "classnames",
            "version": "2.2.5",
            "purl": "pkg:npm/classnames@2.2.5",
          },
          {
            "type": "library",
            "name": "mobx",
            "version": "3.2.1",
            "purl": "pkg:npm/mobx@3.2.1",
          }
        ]
      )
    end

    it 'should report all the deps in the yarn.lock if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/yarn_lock')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
            "type": "library",
            "name": "@nerv-hq/control-system",
            "version": "1.2.3",
            "purl": "pkg:npm/%40nerv-hq/control-system@1.2.3",
          },
          {
            "type": "library",
            "name": "@magi-core/prediction",
            "version": "0.0.1",
            "purl": "pkg:npm/%40magi-core/prediction@0.0.1",
          },
          {
            "type": "library",
            "name": "classnames",
            "version": "2.2.5",
            "purl": "pkg:npm/classnames@2.2.5",
          },
          {
            "type": "library",
            "name": "mobx",
            "version": "3.2.1",
            "purl": "pkg:npm/mobx@3.2.1",
          },
          {
            "type": "library",
            "name": "eslint-plugin-internal",
            "version": "0.0.0",
            "purl": "pkg:npm/eslint-plugin-internal@0.0.0",
          }
        ]
      )
    end

    it 'should report all the deps in the bower.json if present' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/bower_json')
      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      node_cyclonedx = Cyclonedx::ReportNodeModules.new(scanner.report)
      expect(node_cyclonedx.build_components_object).to match_array(
        [
          {
             "type": "library",
             "name": "lodash",
             "version": "3.0.0",
             "purl": "pkg:npm/lodash@3.0.0",
          },
          {
             "type": "library",
             "name": "angular",
             "version": "1.3.0",
             "purl": "pkg:npm/angular@1.3.0",
          },
          {
             "type": "library",
             "name": "axios",
             "version": "0.17.0",
             "purl": "pkg:npm/axios@0.17.0",
          },
          {
             "type": "library",
             "name": "angular-ui-router",
             "version": "0.2.13",
             "purl": "pkg:npm/angular-ui-router@0.2.13",
          }
        ]
      )
    end

    it 'should produce valid CycloneDX for bower.json' do
      repo = Salus::Repo.new('spec/fixtures/report_node_modules/bower_json')

      scanner = Salus::Scanners::ReportNodeModules.new(repository: repo, config: {})
      scanner.run

      cyclonedx_report = Cyclonedx::Report.new([[scanner.report, false]],
                                               { "spec_version" => "1.3" })
      cyclonedx_report_hash = cyclonedx_report.to_cyclonedx

      expect { Cyclonedx::Report.validate_cyclonedx(cyclonedx_report_hash) }.not_to raise_error
    end
  end
end
