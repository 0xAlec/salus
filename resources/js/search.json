[[{"l":"Salus Overview","p":["Salus (Security Automation as a Lightweight Universal Scanner), named after the Roman goddess of protection, is a tool for coordinating the execution of security scanners. You can run Salus on a repository via the Docker daemon and it will determine which scanners are relevant, run them and provide the output. Most scanners are other mature open source projects which we include directly in the container.","Salus is particularly useful for CI/CD pipelines because it becomes a centralized place to coordinate scanning across a large fleet of repositories. Typically, scanners are configured at the repository level for each project. This means that each repository must be updated when making org-wide changes to how the scanners are run. Instead, you can update Salus and all builds will instantly inherit the change.","Salus provides extensive configurations that allow for global defaults and local tweaks. Finally, Salus can report metrics on each repository, such as what packages are included or what concerns exist. These reports can be centrally evaluated in your infrastructure to allow scalable security tracking."]},{"l":"Supported Scanners","p":["Bandit","Brakeman","BundleAudit","Cargo Audit","Description","Gosec","npm audit","PatternSearch","Salus currently supports the following scanners:","Salus serves as an orchestrator for security scanners. Salus triggers the appropriate scanners if a project meets a scanner's requirements","Scanner","semgrep","This scanner executes Bandit 1.6.2 which looks for common security issues in Python code.","This scanner executes Brakeman 4.10.0 which looks for vulnerable code in Rails projects.","This scanner executes bundle-audit 0.8.0 which looks for CVEs in ruby gem dependencies.","This scanner executes Cargo Audit 0.14.0 scans Cargo.lock files for crates with security vulnerabilities reported to the RustSec Advisory Database","This scanner executes gosec 2.11.0 which looks for security problems in go code.","This scanner executes npm audit 6.14.8 which looks for CVEs in node module dependencies.","This scanner executes semgrep 0.62.0 which looks for semantic and syntactical patterns in code at the AST level.","This scanner executes sift 0.9.0 which looks for certain strings in a project that might be dangerous or could require that certain strings be present.","This scanner executes yarn audit 1.22.0 which looks for CVEs in node module dependencies.","yarn audit"]},{"l":"Dependency Tracking","p":["Salus also provides dependency reporting for the following languages:","Ruby","Node.js(Javascript)","Python","Go","Rust","Swift"]},{"l":"Quick Start","p":["Docker is required to run Salus. The dependencies for the project are stored on a docker, which helps reduce the number of steps required to run Salus.","Check out the Getting Started Guide for detailed instructions or continue here for a more condensed process"]},{"l":"Installation","p":["Docker is available on different operating systems. You can install the appropriate version for your operating system on the Docker website","Docker website","Install Docker for Windows","Install Docker for Linux","All Set! you are now ready to run Salus ✨"]},{"l":"Running Salus","p":["Navigate to the root directory of the project you want to run Salus on","Run the following line in the root directory (No edits necessary). This will run the latest Version of Salus.","Running specific versions of Salus is also possible. All you need to do is provide the version tag","To view all versions of Salus, visit the releases page"]},{"l":"Configurations","p":["Salus is highly configurable to work in different environments and with different scanners. It supports environment variable interpolation and cascading configurations and can read configuration and post reports over HTTP.","Sometimes it's necessary to ignore certain CVEs, rules, tests, groups, directories, or otherwise modify the default configuration for a scanner. The scanner configuration documentation explains how to do so for each scanner that Salus supports.","If you would like to build custom scanners or support more languages that are not currently supported, check out the guide for creating custom scanners."]},{"i":"development","l":"Development \uD83D\uDC77‍♂️","p":["Contribution to this project is extremely welcome and it's our sincere hope that the work we've done only serves as a foundation for allowing the security/development communities to come together to improve the security of everyone's infrastructure.","You can read more about getting your development environment set up, or the architecture of Salus."]},{"i":"license","l":"License \uD83D\uDCC3","p":["This project is available open source under the terms of the Apache 2.0 License."]}],[{"l":"Salus Configuration"},{"l":"Providing Configuration to Salus","p":["Salus supports multiple methods of parsing config files."]},{"l":"Overriding the Default Configuration","p":["Salus uses a default configuration if no other configuration is provided. This helps prevent misconfigurations that might result in silent failures.","The easiest way to provide custom configuration to Salus is to put a salus.yaml file in the root of the project that is being scanned. This will automatically be read by Salus and any configurations given will overwrite the default configurations.","Running the command below will use your salus config file ( salus.yaml) if it is present","To override the default configuration make sure your config file is named salus.yaml and not salus.yml"]},{"l":"Using a Local Configuration File","p":["If you have a configuration file in the root in a different folder within the Project, you can point to it with the --config flag (or -c). For example, if you had the configuration file at the location ./tests/salus-config.yaml you can use the following command."]},{"l":"Using a Remote Configuration File","p":["Salus also supports remote configuration files that can be fetched over HTTP. This is particularly useful for organization-wide configurations that are centralized."]},{"i":"using-multiple-configuration-files-cascading-configurations","l":"Using Multiple Configuration Files (Cascading Configurations)","p":["You can append multiple configuration files by listing the configuration URIs in order of ascending precedence.","Salus merges the Hash in the configuration files and the keys are preserved but values are overwritten. A space () is used to delimit each configuration file.","When using a global configuration provided over HTTP, you might still want to modify Salus for special cases relevant only to the scanned repository.","Wrap multiple configuration files with quotes \" \""]},{"l":"Using SALUS_CONFIGURATION","p":["A third method of providing configuration URIs is via the environment variable SALUS_CONFIGURATION. If this envar is set, it will take precedence over the flag URI."]},{"l":"Salus Configurations Options","p":["Each configuration file should be valid YAML and may contain the following values."]},{"l":"active_scanners","p":["Lists which scanners should run. These scanners are only triggered if they are relevant to the project.","String value of \"all\" or \"none\" which are placeholders for the config to use all Salus Scanners or none of them.","All Salus Scanners are set as active scanners. Each scanner will execute if the source code requires that scanner"]},{"l":"builds","p":["Hash with build info. This config option can contain arbitrary keys."]},{"l":"cascade_config","p":["Cascade_config contains available settings to control how multiple configuration files are cascaded","Put this configuration in the config file with the highest precedence","When cascading configurations this option determines if arrays values for the same key should be combined.","Having this option set to false would use the array values in the config file with the highest precedence when multiple config files configure the same option.","When this option is true, the values for conflicting options will be merged","For example if you had two configuration files","Running Salus with the command","The configurations for active_scanner in salus-config1.yml would override the configurations for active_scanners in salus-config2.yml","The following sample shows how to configure this option"]},{"l":"custom_info","p":["Used in the report for any additional information that the consumer of the Salus Report might use.","The user can define what values are stored here. The Information listed in here shows up in the exported Salus Report"]},{"l":"enforced_scanners","p":["enforced_scanners are scanners that cause Salus to fail if the scanner fails. Controlling this list will allow you to choose which scanners must pass for a CI environment to show a successful build. It can allow you to run new scanners in test mode while being tuned or rolled out across a fleet of builds.","By default, we enforce all scanners which we deem to have low false positive rates. Strong defaults lower the risk of misconfiguration that could fail closed if the configuration was necessary to ensure certain scanners pass. Other scanners may need to graduate from the testing phase or should only be enforced explicitly by custom configuration.","The following sample shows how to configure this option"]},{"l":"project_name","p":["Used in the report to identify the project being scanned."]},{"l":"reports","p":["Additional options are also available for cyclonedx using the optional keyword cyclonedx_options","Additional options are also available for sarif using the optional sarif_options config","additional post parameters can be specified through the additional_params field","additional_params","cyclonedx_project_name","cyclonedx-json","Defines where to send Salus reports. This is a required configuration for the reports option","Description","Each entry in reports must contain keys for uri and format. This help define where to send Salus reports and in what format.","Each report hash can add post parameters using the post option","Each report hash can also specify what http verb should be used. Salus currently supports put and post. If puts is not defined, Salus defaults to use post","include_suppressed","is an optional key and defaults to false.","json","Options","reports: Array","Salus reports can be sent as a report parameter by specifying the parameter name in salus_report_param_name. when this is not defined, the salus report will be located in the body of the request sent","salus_report_param_name","sarif","spec_version","The value can point to either the local file system or remote HTTP destinations.","This boolean option allows users to include/exclude suppressed/excluded results in their sarif reports. Currently, this is supported for NPM audit reports","This Example shows how to configure this option","This option allows users to specify the cyclonedx report project name.","This option allows users to specify the cyclonedx report spec version. Currently, only versions 1.2 and 1.3 are supported, with 1.3 being the default version if the parameter is not specified.","This option defines what format to export salus reports. This is a required configuration for the reports option The available formats are:","txt","Values specified with two parentheses i.e {{ VALUE }} will be treated as an environment variable ENV[VALUE] while values specified without will be set as is.","yaml","you can pass in headers with the corresponding key and value pairs list."]},{"l":"scanner_configs","p":["Defines configuration relevant to specific scanners.","Special configurations that exists for particular scanners is defined in the scanners directory."]},{"l":"Envar Interpolation","p":["It's sometimes useful, especially in CI clusters, to have a generalized configuration file to reference environment variables. Salus will interpolate the configuration files before parsing them. To reference an environment variable, put the name of the envar in two parentheses, {{ ENVAR_NAME }}."]}],[{"l":"Scanner Configurations","p":["Salus will read your salus config file The configurations on this page are available for all Salus scanners and these can be used in the salus config file to configure your desired scanners. Each scanner may also have scanner specific configuration available solely for that scanner.","In addition to these configurations, you can also create your custom configurations for salus or add additional scanners to salus","You'll need to specify your scanner and its configuration in a config file to use these configurations. Here the config file used was salus.yml","In your salus config file, you can add configurations for multiple salus scanners"]},{"l":"exceptions","p":["advisory_id","Any additional notes or reasons why this CVE was ignored","changed_by","CVE you want to ignore","Dependency Scanners","Description","expiration","name of the person who made the change","notes","Option","RepoNotEmpty","string","The advisory_id, changed_by and notes are required fields.","The following Scanners currently do not support this configuration option","This is an optional field that identifies the expiration date for the exception","Type","When a CVE is present in a dependency, the best course of action is to upgrade the dependency to a patched version. However, if there is currently no patch available or it's a false positive, you can use the following configuration option to ignore a particular CVE. Salus provides an option to ignore these CVEs using the exceptions option"]},{"l":"failure_message","p":["You can define a custom message to be shown to the developer when the given scanner fails. This is useful for pointing developers to internal security resources or teams that can help address the failure.","Example with BundleAudit configuration:"]},{"l":"pass_on_raise","p":["Some scanners are very resilient and it's rare for them to throw exceptions. Usually, this is for a good reason, like a malformed file is unparsable by the scanner and so this warrants breaking the project's build. By default, if a scanner raises an exception for whatever reason, then the scanner is considered failed as if it found an actual security issue.","However, some scanner fail frequently for reasons out of the developer's control. For example, a CVE registry might be down which means that a CVE scanner cannot update it's local DB and this causes it to raise an error. In that scenario, you might decide that Salus's overall status, and therefore the CI/CD pipeline should not fail. To allow for a scanner to be considered a pass when it raises an exception, you can provide the value true for the directive pass_on_raise. For example:","When this is set to true, any errors thrown by the scanner will still be recorded in the report."]},{"l":"recursion","p":["optional recusion settings.","Options","Description","directory_exclusions","Directories to exclude when recursing. Any matches that occur in the list of directory_exclusions will be ignored","directories","Directories to recurse into. When present, any directories that need to be scanned should explicitly listed","directories_matching","Dynamically identify directories to recurse into. Each entry may have a combination of filename and or content. Filename matches on the name of the file, while content matches on the content within the file.","static_files","Files to copy from the root directory to recursed directories. This can be useful for mono repositories where a common file should be copied to subdirectories for proper scanning."]},{"l":"scanner_timeout_s","p":["At times, scanners may perform scans for unacceptable lengths of time. To limit this behavior, you can define scanner_timeout_s with the number of seconds you wish the scan to last before it times out.","Example with YarnAudit configuration:","This will limit YarnAudit scans to 1 minute (60 seconds) in execution time."]}],[{"l":"Bandit","p":["The Bandit Scanner is a static analysis tool that finds common security vulnerabilities in Python code. Salus triggers the Bandit scanner if your repo has a setup.cfg or requirements.txt."]},{"l":"Configuration","p":["In addition to the global scanner configurations, the Bandit scanner has specific configurations available. Salus does a great job of providing support for most of these options.","In addition, you can configure the additional options below. For more information about Bandit configurations, see Bandit Usage","Currently in Salus, Bandit runs with the --recursive and --format json options turned on."]},{"l":"aggregate","p":["aggregate output by vulnerability (default) or by filename. It can take the string values file or vuln"]},{"l":"baseline","p":["path of a baseline report to compare against"]},{"l":"confidence","p":["identifies the confidence level, It can take the string options LOW, MEDIUM or HIGH. The default on Salus is LOW"]},{"l":"configfile","p":["Path to optional config file to use for selecting plugins and overriding defaults"]},{"l":"exclude","p":["List of paths to exclude from scan"]},{"l":"ignore-nosec","p":["set to true if you want lines with #nosec comments to be skipped, false if otherwise"]},{"l":"ini","p":["path to a .bandit file that supplies command line arguments"]},{"l":"level","p":["report only issues of given severity level or higher. The valid values for this option are the strings``LOW, MEDIUM or HIGH"]},{"l":"profile","p":["profile to use (defaults to executing all tests)"]},{"l":"skips","p":["skips is currently supported for backwards compatibility and will be deprecated in future versions of salus. This exceptions option will replace this","List of test IDs to skip."]},{"l":"tests","p":["list of test IDs to run"]},{"l":"Sample Configuration for Scanner","p":["Here is an example of how the options detailed above could be configured in a salus.yml file"]},{"l":"Unsupported Configurations","p":["The following Bandit config options are currently NOT supported."]}],[{"l":"Brakeman","p":["The Brakeman Scanner is a static analysis tool that finds vulnerabilities in Ruby on Rails projects. It's internal AST and ability to follow data throughout the codebase makes it particularly strong at finding common vulnerabilities such as SQLi, XSS and RCE."]},{"l":"Configuration","p":["Brakeman's configuration is complex and it parses its own brakeman.ignore file. Salus will let Brakeman reuse this file if it's present. To create one, you can use brakeman -I which lets you run an interactive scan. For more information on Brakeman configs, see Brakeman Options","The following configuration options are available for Brakeman in Salus"]},{"l":"all","p":["When true, Brakeman runs all checks, off by default. 'All' is the 'A' brakeman config option."]},{"l":"config","p":["Config file for brakeman path, anything in the command line config here will override the brakeman config file. By default it will look for a config in: ./config/brakeman.yml, ~/.brakeman/config.yml, and /etc/brakeman/config.yml. 'Config' is the 'c' brakeman config option."]},{"l":"branch-limit","p":["This should be an integer value. 0 is almost the same as --no-branching but --no-branching is preferred. The default value is 5. Lower values generally make Brakeman go faster. -1 is the same as unlimited."]},{"l":"escape-html","p":["This forces Brakeman to assume output is escaped by default. This should not be necessary."]},{"l":"except","p":["List of checks to exclude"]},{"l":"faster","p":["This will disable some features, but will probably be much faster (currently it is the same as --skip-libs --no-branching). WARNING: This may cause Brakeman to miss some vulnerabilities."]},{"l":"ignore","p":["Brakeman will ignore warnings if configured to do so. By default, it looks for a configuration file in config/brakeman.ignore. To specify a file to use this argument. 'Ignore' is the 'i' brakeman config option."]},{"l":"ignore-model-output","p":["To ignore possible XSS from model attributes"]},{"l":"ignore-protected","p":["Brakeman will raise warnings on models that use attr_protected. To suppress these warnings, set this to true."]},{"l":"no-assume-routes","p":["Brakeman used to parse routes.rb and attempt to infer which controller methods are used as actions. However, this is not perfect (especially for Rails 3/4), so now it assumes all controller methods are actions. To disable this behavior set this to true."]},{"l":"no-branching","p":["To disable flow sensitivity in if expressions set this to true"]},{"l":"no-informational","p":["When true, this supppresses informational warnings. 'No-informational' is the 'q' brakeman config option."]},{"l":"no-threads","p":["By default Brakeman runs each check in a separate thread. When true, disables this behavior. 'No-threads' is the 'n' brakeman config option."]},{"l":"only-files","p":["Very dangerous. This only looks at certain files"]},{"l":"path","p":["By default, Salus will scan the top level directory, set this if you wish to override this behavior"]},{"l":"report-direct","p":["To only raise warnings only when untrusted data is being directly used"]},{"l":"rails3","p":["When true, this forces brakeman into rails 3 mode. This should not be necessary if you have a Gemfile.lock file. 'Rails3' is the '3' brakeman config option."]},{"l":"rails4","p":["When true, this forces brakeman into rails 4 mode. This should not be necessary if you have a Gemfile.lock file. 'Rails4' is the '4' brakeman config option."]},{"l":"safe-methods","p":["To indicate certain methods return properly escaped output and should not be warned about in XSS checks"]},{"l":"skip-libs","p":["To skip processing of the lib/ directory"]},{"l":"skip-files","p":["To skip processing of the lib/ directory"]},{"l":"test","p":["list of checks to run"]},{"l":"url-safe-methods","p":["Brakeman warns about use of user input in URLs generated with link_to. Since Rails does not provide anyway of making these URLs really safe (e.g. limiting protocols to HTTP(S)), safe methods can be ignored with"]},{"l":"warning","p":["To only get warnings above a given confidence level. The -w switch takes a number from 1 to 3, with 1 being low (all warnings) and 3 being high (only highest confidence warnings). 'Warning' is the 'w' brakeman config option."]},{"l":"Sample Configuration for Scanner"}],[{"l":"Bundle Audit","p":["The Bundle Audit Scanner finds CVEs in Ruby gems included in a project."]},{"l":"Configurations","p":["In addition to the global scanner configurations, the BundleAudit scanner has specific configurations available.","The following configuration options are available for the bundle audit scanner."]},{"l":"ignore","p":["Ignore specific advisories","This option for ignoring vulnerabilities is deprecated in Salus, please use the exceptions option instead"]},{"l":"local_db","p":["By default, BundleAudit pulls advisory info from ruby-advisory-db. BundleAudit also supports scanning against a local advisory DB. The config below will scan against the local DB in addition to ruby-advisory-db.","The path/to/local/database should follow the same format as the ruby-advisory-db.","This means that at the top-level, there should be a gems dir, each sub-directory inside gems should have the same name as an actual gem, and each gem directory should contain the advisory yml's."]},{"l":"Sample Configuration for Scanner"}],[{"l":"Cargo Audit","p":["Audit Cargo.lock files for crates with security vulnerabilities reported to the RustSec Advisory Database."]},{"l":"Configurations","p":["In addition to the global scanner configurations, the Cargo Audit scanner has it's specific configurations available.","The following configuration options are available for the CargoAudit scanner."]},{"l":"elevate_warnings","p":["Some warnings may lack a CVE advisory id. Warnings lacking an advisory id can be disabled by setting elevate_warnings to false. The elevate_warning setting is used to elevate warnings (yanked or unmaintained repos) to errors (default)."]},{"l":"Sample Configuration for Scanner"}],[{"l":"Dependency Scanners","p":["Description","Golang","Java","JavaScript","Language","Python","ReportGoDep","ReportGradleDeps, ReportPomXml","ReportNodeModules","ReportPodfileLock, ReportSwiftDeps","ReportPythonModules","ReportRubyGems","ReportRustCrates","Ruby","Rust","Salus currently provides scanners to report dependencies found in different projects. Each scanner requires certain dependency files to be present before they are triggered","Scanner","Swift","These dependency reporters are triggered when a pom.xml file is present in project","These scanners are used to report modules or dependencies found in a project.","This dependency reporter or scanner is triggered when a Cargo.toml or Cargo.lock file present","This dependency reporter or scanner is triggered when a Gemfile Present","This dependency reporter or scanner is triggered when a Gopkg.lock go.mod go.sum file is present in project","This dependency reporter or scanner is triggered when a package-lock.json, package.json or bower.json are present","This dependency reporter or scanner is triggered when a requirements.txt file is present","triggered when a Package.resolved or Podfile.lock file is present"]},{"l":"Configurations","p":["In addition to the global scanner configurations, Dependency Scanner have their own specefic configurations available.","The following configuration options are available for the Dependency scanners."]},{"l":"include_dev_deps","p":["This config option allows user to include or exclude development dependencies in the reporting. The Default behavior in Salus assumes include_dev_deps as true.","Here is an example of how the user can provide include_dev_deps in a salus.yml file.","For now, Salus only supports this config option on the ReportNodeModules scanner"]}],[{"l":"Golang OSV Scanner","p":["Finds vulnerable dependencies in a Golang project. By default, GoOSV Scanner pulls advisory information from OSV - Database for open source vulnerabilities to compare against the dependencies found in go.sum."]},{"l":"Configuraton","p":["When a CVE is present in a dependency, the best course of action is to upgrade the dependency to a patched version. However, if there is currently no patch available or its a false positive you can use the following configuration option to ignore a particular CVE."]}],[{"l":"Gosec","p":["The Gosec Scanner is a static analysis tool that finds vulnerabilities in Go projects using the Go AST. Gosec supports Go modules as of Gosec 2.0.0."]},{"l":"Configuration","p":["In addition to the global scanner configurations, the Gosec scanner has specific configurations available.","The following configuration options are available for the Gosec scanner."]},{"l":"confidence","p":["This option filters out issues with a lower confidence than configured. The valid string options are low, medium or high"]},{"l":"exclude","p":["List of rules IDs to exclude, deprecated in favor of exceptions"]},{"l":"exclude-dir","p":["excludes folders and its contents from scan"]},{"l":"include","p":["List of rules IDs to include","only basic regex formatting is performed and does not check if this is the assigned value is a valid rule number"]},{"l":"no-fail","p":["This option determines if the scanner should fail if issues were found."]},{"l":"nosec","p":["Ignores #nosec comments when set to true. This is the default functionality in Salus"]},{"l":"nosec-tag","p":["Set an alternative string for #nosec (default)"]},{"l":"run_from_dirs","p":["run gosec from the specified subdirs only. for now, any other gosec config will apply to all subdir runs"]},{"i":"#","p":["This option filters out issues with a lower severity than configured. It can take the string options low, medium or high"]},{"i":"#","p":["This option determines if issues should be sorted by severity"]},{"l":"tests","p":["This option determines if tests files should be scanned"]},{"l":"Sample Configuration","p":["The exclude configuration is supported for backwards compatibility and will be deprecated in the future. Please use exceptions instead"]}],[{"l":"Gradle OSV Scanner","p":["Finds vulnerable dependencies in a Gradle project. By default, GradleOSV Scanner pulls advisory information from OSV - Database for open source vulnerabilities to compare against the dependencies found by running gradle dependencies."]},{"l":"Configuraton","p":["When a CVE is present in a dependency, the best course of action is to upgrade the dependency to a patched version. However, if there is currently no patch available or its a false positive you can use the following configuration option to ignore a particular CVE."]}],[{"l":"Language Version Scan","p":["This scanner checks whether repository's programming language version is within the range of configured versions.","Salus Currently Supports the following Language Version Scanners","GoVersionScanner","RubyVersionScanner"]},{"l":"Configuration","p":["In addition to the global scanner configurations, Language Version Scanners have their own specific configurations available.","The user may provide min_version and max_version for each scanner.","Option","Description","max_version","This is a Semantic version string, indicating the minimum version of a language that should be allowed in a project"]},{"l":"Sample Scanner Configuration","p":["The following is an example of how the user can provide version configuration in salus.yaml file."]}],[{"l":"Maven OSV Scanner","p":["Finds vulnerable dependencies in a Maven project. By default, MavenOSV Scanner pulls advisory information from OSV - Database for open source vulnerabilities to compare against the dependencies found in pom.xml."]},{"l":"Configuraton","p":["When a CVE is present in a dependency, the best course of action is to upgrade the dependency to a patched version. However, if there is currently no patch available or its a false positive you can use the following configuration option to ignore a particular CVE."]}],[{"l":"NodeAudit","p":["Finds CVEs in Node modules included as dependencies in a project.","NodeAudit is a superclass scanner for YarnAudit(executes yarn audit) and NPMAudit(executes npm audit)."]},{"l":"Configuration","p":["When a CVE is present in a dependency, the best course of action is to upgrade the dependency to a patched version. Conveniently, you can run npm audit fix which will try to find a compatible and patched version of the module. If you're using yarn you will have to try upgrading manually.","This might not be possible if there is no patched version available yet or if the upgraded version is not compatible with your project. Provided that the vulnerability is not relevant to the way in which you use this dependency, you might want Salus to ignore this particular CVE. Use the following configuration to achieve this.","To allow for backwards compatibility and easy switching between NPM and Yarn, Salus will merge configuration for NodeAudit, NPMAudit and YarnAudit into a single object to configure the NodeAudit scanner."]}],[{"l":"NPMAudit","p":["Finds CVEs in Node modules included as dependencies in a project that is packaged by NPM.","See the NodeAudit doc for configuration options."]}],[{"l":"Package Version Scanning","p":["This scanner checks whether repository's package version is within a range of configured versions. This allows you to block certain versions of a package or dependency in your project.","Salus currently supports the following Package Version Scanners","NPMPackageScanner","GoPackageScanner","RubyPackageScanner"]},{"l":"Configuration Options"},{"l":"package_versions","p":["for each package_name, users may configure the min_version, max_version or blocks options","Options","Description","min_version","This is a Semantic Version String which indicates the Minimum version of a package allowed in the project","max_version","This is a Semantic Version String which indicates the Maximum version of a package allowed in the project","blocks","This is a Semantic Version String which indicates specific versions of a package to restrict from a project."]},{"l":"Sample Configuration","p":["Here is an example of how to provide version configuration in a salus config file"]}],[{"l":"Pattern Search","p":["PatternSearch uses sift, written in Go, to perform the pattern matching.","This scanner can flag anti-patterns found in a codebase or require that certain strings be present. This might be useful for preventing the use of dangerous methods like eval() in Ruby (which might allow for RCE) or dangerouslySetInnerHTML in React (which might allow for XSS). By default, all found patterns are added to the info section of the report. If a found pattern is forbidden, this scanner will fail and the message will be show to the developer in the report to give additional context on why this was an issue. A required pattern must be found in order for the scan to pass."]},{"l":"Configuration","p":["The scanner also allows the options below. These options can be set globally and per-match. In addition, the exclude_ options can be used together.","Option","Type","Description","exclude_extension and include_extension","Array","for excluding and including file extensions, respectively. While these options can be combined, exclusions take precedence when extensions conflict (are both included and excluded) in declarations.","exclude_directory","for excluding directories whose name matches GLOB. It appears that sift does not support / s in the directory name.","exclude_filepaths","for excluding file paths. Note the file paths must be regular paths, not GLOB, and cannot include regular expressions.","not_followed_within","for only showing matches not followed by PATTERN within NUM lines. The value must have the format NUM:PATTERN. Use 0 for excluding on the same line.","files","for search only files whose name matches GLOB."]},{"l":"Sample Configuration for Scanner"}],[{"l":"Python OSV Scanner","p":["Finds vulnerable dependencies in a Python project. By default, PythonOSV Scanner pulls advisory information from OSV - Database for open source vulnerabilities to compare against the dependencies found in requirements.txt."]},{"l":"Configuration","p":["When a CVE is present in a dependency, the best course of action is to upgrade the dependency to a patched version. However, if there is currently no patch available or its a false positive you can use the following configuration option to ignore a particular CVE."]}],[{"l":"Repository Not Blank","p":["This scanner checks that there is at least 1 file for Salus to scan. If the repository is blank, this scan will fail because it indicates that Salus' configuration is likely incorrect. This can prevent silent failures from misconfiguration.","For instance, if the repository was volumed in incorrectly, this scan would fail. TODO: What does this mean"]}],[{"l":"Semgrep","p":["semgrep(syntactic grep) is an open-source tool for finding patterns in code. It's useful for preventing the use of known anti-patterns in a codebase or enforcing the correct use of secure-by-default frameworks (e.g. always use a project's sanitization method on user-provided data).","semgrep is fast and powerful; it's grep-esque patterns are lifted into AST matchers. Compared to regexes these patterns aren’t affected by whitespaces, comments, newlines, the order of keyword arguments, variable renaming, and other language nuances.","Currently, the supported languages are: C, Go, Java, JavaScript, and Python."]},{"l":"Configuration","p":["There are two types of rules in Semgrep:","Simple rules- expressed with a single pattern.","Advanced rules- expressed with multiple patterns, like: X must be true AND Y must be too, or X but NOT Y, or X must occur inside a block of code that Y matches. These patterns are composed with the patterns keyword.","In salus.yaml, both simple and advanced rules can be specified with a path to a Semgrep YAML config file. In adddition, simple rules can be specified directly in salus.yaml."]},{"l":"Specifying path to Semgrep YAML config","p":["In salus.yaml, you can specify a set of semgrep rules with a path to a Semgrep config file. You must specify","config- a full Semgrep config file","Either required: true or forbidden: true","If a found pattern is forbidden or if a not found pattern is required, then the scanner will fail and the message will be show to the developer in the report.","In addition, you can optionally specify","exclude- Skip any file or directory that matches this pattern","--exclude='*.py' will ignore the following: foo.py, src/foo.py, foo.py/bar.sh. --exclude='tests' will ignore tests/foo.py as well as a/b/tests/c/foo.py. Can add multiple times.","Example semgrep_config_1.yaml. The rule says find all patterns of the form$X == $X, but exclude 0 == 0.","Keywords in this file:","id- Unique, descriptive identifier, cannot contain whitespaces (required)","patterns or pattern- patterns or pattern or pattern-regex (required)","message- Message if rule (forbidden and found) or (required and not found) (optional)","languages- Any of: c, go, java, javascript, or python (required)","severity- One of: WARNING, ERROR (required)"]},{"i":"adding-simple-rule-directly-without-semgrep-config-file","l":"Adding simple rule directly (without Semgrep config file)","p":["Simple rules that can be expressed with a single pattern can be directly specified in salus.yaml. Each simple rule in salus.yaml must include","pattern- the single pattern","forbidden: true or `required: true","language- Any of: c, go, java, javascript, or python","The user can optionally provide","exclude- Skip any file or directory that matches this pattern","--exclude='*.py' will ignore the following: foo.py, src/foo.py, foo.py/bar.sh. --exclude='tests' will ignore tests/foo.py as well as a/b/tests/c/foo.py. Can add multiple times.","message- Message if rule (forbidden and found) or (required and not found)","Example,"]},{"l":"Whitelisting Findings","p":["Please see semgrep's ignoring findings documentation."]},{"l":"Limitations of Semgrep","p":["There may be parser-related issues from Semgrep","Parser-related issues will be displayed as warnings and do not cause salus to fail.","Salus will still show semgrep results from files that do not have parser issues.","Salus semgrep currently does not support scanning against pre-built rules.","But we plan to support this in the near future!"]}],[{"l":"YarnAudit","p":["Finds CVEs in Node modules included as dependencies in a project that is packaged by Yarn.","This scanner allows you to select which types of dependencies to exclude. By default, all dependencies are included.","See https://yarnpkg.com/lang/en/docs/dependency-types/ for more info on dependency types."]},{"l":"Configuration","p":["If you only want to scan production-related dependencies, then you want the following:","See NodeAudit doc for more configuration options."]}],[{"l":"Salus Reports","p":["Salus compiles a report while executing each scanner and before finishing, this report is output in one or multiple ways.","By default, Salus always prints the report to STDOUT. This can be turned off via the --quiet(-q) flag.","Additionally, Salus can be configured to send reports to both the local file system or remote HTTP endpoints. See the configuration documentation for more detail.","The destinations that receive reports can be configured using the --reports(-r) flag. Values for this flag follow the format --reports report-key:report-pattern, where report-key is the configuration key by which reports will be filtered, and report-pattern is the pattern that values corresponding to report-key must equal.","For example, --reports name:John will filter reporting so that only reports with a name key set to John in their configuration receive scan reports.","Salus reports contain the following information:","Report format version - important for report consumers to correctly determine how to parse the report.","Data about the codebase it scanned.","The configuration that Salus used during the scan.","The outcome of each scanner it ran.","Information about the repo that might be useful for further analysis (such as what dependencies it has).","Errors that happened during Salus execution."]},{"l":"Salus Report Format","p":["The report, structurally, is a Hash of the following form:","While the report above is in JSON form, Salus reports can also be generated in YAML, text, SARIF and CycloneDX form."]},{"l":"CycloneDX Reports","p":["CycloneDX is a lightweight software bill of materials (SBOM) standard designed for use in application security contexts and supply chain component analysis. Salus can leverage CycloneDX to standardize dependency reporting. For more information see CycloneDX Spec."]},{"l":"Salus Scanners with CycloneDX Support","p":["The following Salus dependency scanners are currently planned to adapt to report CycloneDX output:","Dependency Scanners"]},{"l":"Example CycloneDX Report","p":["Below is an example of the structure of a CycloneDX report which will then be base64 encoded in the final json.","Final json output:"]},{"l":"SARIF Reports","p":["SARIF is a standardized output format for static analysis tools. Considering the wide range of security tools that Salus currently supports, with each tool producing its own unique output; SARIF provides a generalized report format for all these tools. For more information about the SARIF format visit the SARIF website.","SARIF reports generated by Salus follow this format:"]},{"i":"salus-ids-for-sarif","l":"Salus ID's for SARIF","p":["ID","Description","SAL001","This Scanner Currently does not support Sarif","SAL002","Errors logged in a scanners json report","SAL003","Errors logged by scanner during invocation"]},{"l":"Salus Scanners with SARIF support","p":["The following salus scanners are currently adapted to report SARIF output:","Gosec","Yarn Audit","NPM audit"]},{"l":"Example SARIF report","p":["Report generated by scanning iglo"]},{"l":"Example Reports","p":["Reports generated by scanning the rails/actioncable-examples@916910c repository."]},{"i":"text-from-stdout","l":"Text from STDOUT:"},{"i":"yaml-form","l":"YAML Form:","p":["Long arrays have been shortened for brevity."]},{"i":"json-form","l":"JSON Form:","p":["Long arrays have been shortened for brevity."]},{"l":"Example with Errors","p":["Reports generated by scanning the coinbase/traffic_jam@2b90aa5 ruby gem repo."]},{"i":"text-from-stdout-1","l":"Text from STDOUT:"},{"l":"YAML form verbose"},{"l":"JSON form verbose"}],[{"l":"Getting started"},{"l":"Installation","p":["Docker is required to run Salus. The dependencies for the project are stored on a docker, which helps reduce the number of steps necessary to run Salus.","Docker is available on different operating systems. You can install the appropriate version for your operating system on the Docker website","Docker website","Install Docker for Windows","Install Docker for Linux","All Set! you are now ready to run Salus ✨"]},{"l":"Running Salus","p":["Navigate to the root directory of the project you want to run Salus on","Run the following line in the root directory (No edits necessary). This will run the latest Version of Salus.","Running specific versions of Salus is also possible. All you need to do is provide the version tag","To view all versions of Salus, visit the releases page"]},{"l":"Configuring Salus","p":["Salus can be configured by providing a salus configuration file","Salus has different configuration options, visit the salus configurations page to learn more about them"]},{"l":"Configuring Salus Scanners","p":["Salus provides global configurations for its scanners as well as scanner specific configurations.","Configurations for scanners are added to the salus config file with the config option scanner_config","The configuration below is an example of you could configure this option.","Each scanner may have scanner specific configurations, Please visit the individual page for each scanner for more information about them"]},{"l":"Continuous Integration","p":["Salus can be used in different CI pipelines to run security checks. You would have to configure your CI pipelines to run Salus to achieve this. For example, update the config file to run salus. In circle, it will look like this:","You can also provide configurations as well and utilize environment variables in your salus configuration files","We currenlty have documentation on how to achieve this in:","Circle CI","Github Actions","Bugsnag"]},{"l":"Customizing Salus","p":["First, you will need to get your development environment setup to customize salus. After getting your dependencies installed, you are ready to configure salus ✨"]},{"l":"Create Custom Scanners","p":["Custom Scanners can be created for salus. There is a checklist available to help guide this process.","With your new scanner, you can create your own scanner-specific configurations."]},{"l":"Create Custom Configurations","p":["It is possible to build custom configurations for your scanner or even build additional configurations for existing scanners."]},{"l":"building additional configuration for existing scanners","p":["A good start would be to look at the Base scanner file, which is the parent file for all Salus scanners. The build_options method is what takes in the configurations","The next step would be to look at the source code for the scanner you want to customize."]},{"l":"Running Custom Salus","p":["In order to run your customized version of salus, you will need to create a docker image.","After this, you can run your version of salus in any location of your choice.","If you are testing a new scanner across a large fleet of services and think it produces a valuable signal for checks that other organizations may want, please submit a PR to this repository with some data about what this scanner can find. If the findings are promising and the checks are valuable, we will include it in the official version."]}],[{"l":"Environment Setup","p":["To develop Salus, you will need to install Ruby and the relevant dependencies. Both Ruby gems and system dependencies are required depending on the scanners that are being executed."]},{"l":"Install dependencies","p":["install Ruby per https://www.ruby-lang.org/en/documentation/installation/","for NPM, install per https://www.npmjs.com/get-npm","for Yarn, install per https://classic.yarnpkg.com/en/docs/install/#mac-stable","for Go reporting, install Go per https://golang.org/doc/install#install","for PatternSearch, install sift per https://sift-tool.org/download","for Semgrep, install semgrep per https://github.com/returntocorp/semgrep#getting-started","for end-to-end tests and running Salus, install Docker per https://docs.docker.com/install"]},{"l":"Install gems"},{"l":"Install docker","p":["Docker is available on different operating systems. You can install the appropriate version for your operating system on the Docker website","Docker website","Install Docker for Windows","Install Docker for Linux"]},{"l":"Running tests","p":["If all installation was successful, you can run the test with rspec.","There are also integration tests that check that the Salus container has all necessary dependencies installed in its container."]}],[{"l":"Adding Custom Scanners","p":["If you would like Salus to run scanners which are not in the official version, you can build a custom image. These might be new scanners that you want to test or scanners that are relevant only to your organization.","A custom image can be made from a minimal Docker file that is FROM the coinbase/salus image, installs any new system dependencies and then copies your new scanner class into the appropriate location. coinbase/custom-salus-example is an example of a custom image."]},{"l":"Checklist","p":["This is a checklist for creating custom scanners"]},{"i":"1-determine-which-types-of-files-you-want-to-scan","l":"1) Determine which types of files you want to scan.","p":["In the repo class, look to see if your file type is already available. If not, then create a new item in the array.","{ handle: :android_app, filename: '.apk', wildcard: true },","The handle here will autocreate a few methods but the most important is the {handle}_present? which in this example is android_app_present?.","The handle name must be unique to avoid overwriting previous handles.","The filename key is the file to look for. For a generic android app scanner, we don't typically know the name of file beforehand, but we do know that the file has a special extension apk.","The wildcard option performs an expensive recursive search in the entire repo for a match against *{filename} which in this example is *.apk as a valid match. TODO: The filename could be updated to take a regex match instead.","For a filename that we do know the exact file name say like a known library manifest file like Gemfile.lock for ruby projects, we can specify this entire filename and omit the wildcard option entirely. The default for wildcard is false."]},{"i":"2-add-the-scanner-to-the-docker-container","l":"2) Add the scanner to the Docker container","p":["If you are relying on some Open Source Software (OSS) scanner that you need to have available locally, then you will need to add the installation steps in the Docker container. Please follow the instructions for the scanner on installation steps."]},{"i":"3-define-your-scanner-by-defining-two-methods","l":"3) Define your scanner by defining two methods","p":["should_run? which returns a Boolean","run which defines how to run the scanner","Make sure to integrate at least common options for the scanner. You can do this by using the build_options helper function defined in the Base Scanner class scanners/base.rb. There is also additional documentation on how to setup configurations for your scanner"]},{"i":"4-write-integration-tests","l":"4) Write Integration Tests","p":["All public methods should be tested.","Tests should not just test the scanner options work but also test for conflicting or misconfigurations.","Tests should include a pass scan and a fail scan.","A good example can be found in spec/lib/salus/scanners/gosec_spec.rb","You will need to define fixtures as a sample applications to run the scanners against. These fixtures should be very small self-contained programs. Each scanner will have its own folder under spec/fixtures."]},{"l":"Running scanner in test environment","p":["To run non-public scanner tests in your own environment, you can use the following template to help you.","We currently don't publish the test container. In the future, we plan to publish the test container to make this setup easier.","Create the following file Dockerfile.custom_tests The structure of your spec folder should be as follows:","./spec/fixtures/","./spec/lib/salus/scanners/scanner_spec.rb","Then run these command to build and run your tests"]},{"i":"5-submit-your-pr","l":"5) Submit your PR","p":["if you can make the scanner public. For non-public scanners, you can build from the public Docker container and copy over relevant files, like below.","If you are testing a new scanner across a large fleet of services and think it produces a valuable signal for checks that other organizations may want, please submit a PR to this repository with some data about what this scanner can find. If the findings are promising and the checks are valuable, we will include it in the official version."]},{"l":"Example of a Custom Scanner","p":["@repository- instance variable containing a Salus::Repo object.","@repository.path_to_repo- file system path to the target repository.","#log- adds data to the report and is shown in normal (not verbose) mode. This method should be used to show the developer information that they can act on to fix any security issues found from the scan.","#record_dependency_info(info, dependency_file)- adds information about a dependency to the report.","#report_error(error_data)- adds an error encountered while scanning to the report.","#report_failure- adds to the report the fact that this scan was unsuccessful (found a vulnerability).","#report_info(type, message)- adds data to the report and is only shown to the developer in verbose mode. This method is primarily used for information that will be parsed by a Salus report consumer.","#report_recorded_failure?- true if the report has recorded a failure for this scanner.","#report_stderr(stderr)- adds the STDERR of the scanner to the report.","#report_stdout(stdout)- adds the STDOUT of the scanner to the report.","#report_success- adds to the report the fact that this scan was successful (found no vulnerabilities).","#run_shell(command, env: {}, stdin_data: '')- used to run shell commands in the container, useful for executing a scanner.","All scanners should be a subclass of Salus::Scanners::Base. This parent class will provide the necessary methods for reporting scan results. The two methods that must be implemented are #run and #should_run?.","Available Methods:","Example","Scanner class that checks that a Dockerfile, if present, pins its base container."]},{"l":"Example Dockerfile for a Custom Salus Container","p":["This Dockerfile should be in the root of your salus directory","You can then build and run your custom Salus container."]}],[{"l":"Setting up custom configs for your scanner","p":["For setting up custom configurations for your scanner, you can optionally use the helper method build_options. You do not have to use this method if it doesn't help you use your scanner.","For example, let's pretend you intend to send in the configurations in the following format:","-flag -string=foo --list=foo,bar,baz -bool=true -file=./foobar.js -file_list=foo.js,bar.js -multiple first -multiple second -d","Note each type for the arguments, the supported types are:","You would call build options like so:","This will automatically format and read the yaml config file for the scanner configs:"]}],[{"l":"Salus Architecture","p":["Salus is a docker container. Installed into the container are security scanners and a small ruby application that coordinates them.","Salus Architecture Diagram","The source code being scanned is volumed into the container and Salus expects to find this code at the internal path /home/repo. While the Salus application is written in Ruby, other languages are installed in the container as required for each scanners."]},{"l":"Ruby Objects","p":["Salus: the primary class of the application.","Salus::CLI: command line wrapper to run Salus.","Salus::Config: object that maintains Salus' configuration.","Salus::Processor: runs each scanners against the repo.","Salus::Repo: representation of the repository being scanned.","Salus::Report: object that collects data about scans and compiles a report.","Salus::Scanners::name: scanner objects that can determine if a scanner should run, runs the scanner and collect the results."]},{"l":"Plugins","p":["To simplify extension Salus supports light weight plugin architecture. We use the mediator pattern for filters and the observer pattern for events."]},{"l":"Filters","p":["Filters enable the plugin to modify data. Each filter belongs to a filter group.","Group :salus_config Supported Methods :filter_config","filter_config is used to override the loaded configuration after the cascade has been applied","Group :salus_report, Supported Methods :filter_report_hash","filter_report_hash allows mutating the report hash values. Use this filter if you want to customize any data being written to a report"]},{"l":"Events","p":["cli_csan is called once the cli begins the scan, The CLI options are passed as the data to the event","cli_startup is called when bin/salus calls out the Salus::CLI.start(ARGV) to begin the cli. ARGV is passed as the data to this event","Event :cli_scan Salus::PluginManager.send_event(:cli_scan, options)","Event :report_warn","Event :run_shell","Event :salus_scan","Event: run_scanner","Event: scanners_ran","Event: skip_scanner","Events are published, plugins can register listeners for events. Event :cli_startup","report_warn will be invoked during scans if a scanner has determined a warning is necessary. The data payload will be the type of warning and corresponding message.","run_scanner is called immediately before running the scanner. Only scanners that have been determined relevant for the codebase will trigger this event. The data playoad is the scanner name string.","run_shell is called when a scanner executes a shell command to run a native scanner. The data payload will be the array of arguments.","salus scan. This event will be called with the Salus scan has begun. The data playload will be the params passed to the Salus.scan method","scanners_ran will be invoked after all scanners have ran. The data playload will be an array of scanners ran and a second parameter for the SalusReport object","skip_scanner will be called if the scanner is determined to be non-active or not relevant for the codebase. The data playoad is the scanner name string."]}],[{"l":"Contributing to Salus","p":["Contribution to this project is extremely welcome and it's our sincere hope that the work we've done to this point only serves as a foundation for allowing the security/development communities as a whole to come together to improve the security of everyone's infrastructure."]},{"l":"Setup Development Environment","p":["You can read more about getting your development environment set up, or the architecture of Salus."]},{"l":"Code of Conduct","p":["All interactions with this project follow our Code of Conduct. By participating, you are expected to honor this code. Violators can be banned from further participation in this project, or potentially all Coinbase projects."]},{"l":"Bug Reports","p":["Ensure your issue has not already been reported. It may already be fixed!","Include the steps you carried out to produce the problem.","Include the behavior you observed along with the behavior you expected, and why you expected it.","Include any relevant stack traces or debugging output."]},{"l":"Feature Requests","p":["We welcome feedback with or without pull requests. If you have an idea for how to improve the project, great! All we ask is that you take the time to write a clear and concise explanation of what need you are trying to solve. If you have thoughts on how it can be solved, include those too!","The best way to see a feature added, however, is to submit a pull request."]},{"l":"Pull Requests","p":["Before creating your pull request, it's usually worth asking if the code you're planning on writing will actually be considered for merging. You can do this by opening an issue and asking. It may also help give the maintainers context for when the time comes to review your code.","Ensure your commit messages are well-written. This can double as your pull request message, so it pays to take the time to write a clear message.","Add tests for your feature. You should be able to look at other tests for examples. If you're unsure, don't hesitate to open an issue and ask!","Submit your pull request!"]},{"l":"Support Requests","p":["For security reasons, any communication referencing support tickets for Coinbase products will be ignored. The request will have its content redacted and will be locked to prevent further discussion.","All support requests must be made via our support team."]}],[{"l":"Bugsnag Integration","p":["If you wish to report Salus and related Salus scanner errors to your Bugsnag instance to help debug any potential issues, then follow the instructions below to pass your api key and your custom reporting endpoing if you have one."]},{"l":"Setup","p":["Salus requires the environment variable, BUGSNAG_API_KEY to be defined in the docker container."]},{"l":"Error Reporting Endpoint","p":["By default, it will send error reports to https://notify.bugsnag.com. This can be changed by defining the env var, BUGSNAG_ENDPOINT with your custom reporting URL."]}],[{"l":"CircleCI Integration","p":["Salus can be integrated with CircleCI by using a public Orb. All Salus configuration options are supported, and defaults are the same as for Salus itself."]},{"l":"CircleCI Orb for Salus"},{"l":"Parameters","p":["\"\"","active_scanners","active_scanners and enforced_scanners must be yaml formatted for Salus configuration file.","all","Any filename","Any URI","attribute","CircleCI executor to use that specifies Salus environment","coinbase/salus:latest","configuration_file","default","description","enforced_scanners","file://../salus-report.json","json","json, yaml, txt","list of Scanners that block builds","list of scanners to run","Location of salus config file in repo (overrides all other parameters except salus_executor)","options","report_format","report_uri","report_verbosity","Salus Scanners","salus_executor","See executor reference","true","true, false","What format to use for report","Where to send Salus reports","Whether to enable a verbose report"]},{"l":"CircleCI Environment Variables","p":["branch","build_url","ci_project_username","ci_username","CIRCLE_BRANCH","CIRCLE_BUILD_NUM","CIRCLE_BUILD_URL","CIRCLE_COMPARE_URL","CIRCLE_PR_NUMBER","CIRCLE_PR_REPONAME","CIRCLE_PR_USERNAME","CIRCLE_PROJECT_REPONAME","CIRCLE_PROJECT_USERNAME","CIRCLE_PULL_REQUESTS","CIRCLE_REPOSITORY_URL","CIRCLE_SHA1","CIRCLE_TAG","CIRCLE_USERNAME","CircleCI or other build identifier","CircleCI Variable","Comma-separated list of pull requests","compare_url","Description","external_build_id","Hash of last commit in build","Key","Name of git branch being built","Name of repository","Name of repository where pull/merge request was created","Name of tag","Number of the pull/merge request","pr_number","pr_reponame","pr_username","pull_requests","reponame","repository_url","SCM username of project","SCM username of user who created pull/merge request","SCM username of user who triggered build","sha1","Stored in custom_info of a Salus scan.","tag","URL for the build","URL of the Github or Bitbucket repository","URL to compare commits in build"]},{"l":"Examples","p":["Examples of differnt configurations for Circle CI (.circleci/config.yml)"]},{"l":"blocking scan with all scanners"},{"l":"non-blocking scan with all scanners"},{"l":"blocking scan with only Brakeman"},{"l":"scan with custom Salus executor"},{"l":"Unused CircleCI Environment Variables"}],[{"l":"Github Actions Integration","p":["Salus can also be used with Github Actions.","To do this, create a YAML file in the folder .github/workflows/ with the configurations below","These configurations can be customized as well. Here is a link to the Github Action documentation for more context on how to achieve this."]}],[{"l":"Frequently Asked Questions"},{"i":"why-isnt-salus-using-my-local-salusyaml-file","l":"Why isn't Salus using my local salus.yaml file?","p":["Make sure that the file is named salus.yaml(with the \"a\") instead of salus.yml . Also, please make sure that the file is in the root of your project's file tree","Do you have a question that is not covered here? Create an Issue on github let chat!"]}]]